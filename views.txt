create ALGORITHM = MERGE view conf as select id, name, starttime, endtime from activities;
create ALGORITHM = MERGE view acts_confs as 
	select activities.id, group_concat(conf.id) as conflict_ids
	from activities 
		inner join conf 
			on activities.starttime < conf.endtime and 
				conf.starttime < activities.endtime and 
				activities.id <> conf.id 
	group by activities.id;


    create ALGORITHM = MERGE view acts_confs as select activities.*, 
      group_concat(conf.id) as conflict_ids, group_concat(conf.name) as conflict_names 
      from activities left outer join conf on activities.starttime < conf.endtime and 
      conf.starttime < activities.endtime and activities.id <> conf.id group by activities.id;

# select `activities`.`id` AS `id`, `tickets`.`person_id` AS `person_id`, group_concat(`conf`.`name` separator ',') AS `blocked_by` from (((`activities` join `conf` on (((`activities`.`starttime` < `conf`.`endtime`) and (`conf`.`starttime` < `activities`.`endtime`) and (`activities`.`id` <> `conf`.`id`)))) join `tickets` on((`tickets`.`activity_id` = `activities`.`id`))) join `invoices` on(((`tickets`.`invoice_id` = `invoices`.`id`) and (`invoices`.`paid` = TRUE)))) group by `activities`.`id`
drop view acts_blocked_by;
create ALGORITHM = MERGE view acts_blocked_by as 
  select activities.id, tickets.person_id, group_concat(conf.name separator ';') as blocked_by
  from activities 
    inner join conf 
      on activities.starttime < conf.endtime and 
          conf.starttime < activities.endtime and 
          activities.id <> conf.id
    inner join tickets 
      on tickets.activity_id = conf.id
    inner join invoices 
      on tickets.invoice_id = invoices.id
  group by activities.id, person_id;


  create ALGORITHM = MERGE view acts_blocked_by as 
    select activities.id, tickets.person_id, group_concat(conf.name) as blocked_by
    from activities 
      inner join conf 
        on activities.starttime < conf.endtime and 
            conf.starttime < activities.endtime and 
            activities.id <> conf.id
      inner join tickets 
        on tickets.activity_id = conf.id
      inner join invoices 
        on tickets.invoice_id = invoices.id
    group by activities.id, person_id;

  
  # virker ikke - der skal oprettes et bedre view
  create ALGORITHM = MERGE view acts_blocked_by as 
    select activities.id, tickets.person_id, group_concat(conf.name) as blocked_by
    from activities 
      inner join conf 
        on activities.starttime < conf.endtime and 
            conf.starttime < activities.endtime and 
            activities.id <> conf.id
      inner join tickets 
        on tickets.activity_id = activities.id
      inner join invoices 
        on tickets.invoice_id = invoices.id and
          invoices.paid = true
    group by activities.id;

create ALGORITHM = MERGE view acts_free as select activities.id, activities.number - count(tickets.id) as free 
  from activities left outer join tickets on tickets.activity_id = activities.id left outer join (
    select * from invoices where invoices.paid = true 
    or invoices.updated_at < DATE_SUB(NOW() , INTERVAL 20 MINUTE)
  ) as active_invoices on tickets.invoice_id = active_invoices.id group by activities.id;
create ALGORITHM = MERGE view acts_optimized as select acts_confs.*, free from acts_confs inner join acts_free on acts_confs.id = acts_free.id; <--- så kører det!
  
select * from acts_optimized where id = 127;

select acts_confs.*, free from acts_confs inner join acts_free on acts_confs.id = acts_free.id;

--create ALGORITHM = MERGE view active_invoices as select * from invoices where paid = true or updated_at > DATE_SUB(NOW() , INTERVAL 20 MINUTE);
create ALGORITHM = MERGE view member_people as select 

select people.id, people.name, group_concat(activity_id) as activity_ids
  from people left outer join tickets on tickets.person_id = people.id inner join
  invoices on tickets.invoice_id = invoices.id where invoices.paid = true or 
  invoices.updated_at > DATE_SUB(NOW() , INTERVAL 20 MINUTE) group by people.id;

create ALGORITHM = MERGE view acts_member_people as select activities.id, group_concat(people.id) as person_ids, group_concat(people.name) as person_names

create ALGORITHM = MERGE view member_people as select members.id as member_id, 
  group_concat(people.id) as person_ids, group_concat(people.name) as person_names 
  from members left outer join people on members.id = people.member_id 
  group by members.id;

Aktiviteten med dens salgsstatus, aldersregler, konflikter, medlemmets deltagere med id og navn

create ALGORITHM = MERGE view active_tickets as select tickets.* from tickets 
  inner join invoices on tickets.invoice_id = invoices.id
  where invoices.paid = true or 
  invoices.updated_at > DATE_SUB(NOW() , INTERVAL 20 MINUTE);

select people.id, people.name, people.ptype_id, people.aargang,
  group_concat(active_tickets.activity_id SEPARATOR ';') as activity_ids
  from people left outer join active_tickets 
  on active_tickets.person_id = people.id group by people.id;

select people.id, people.name, people.ptype_id, people.aargang,
  group_concat(active_tickets.activity_id SEPARATOR ';') as activity_ids
  from people left outer join active_tickets 
  on active_tickets.person_id = people.id
  where people.member_id = 354
  group by people.id;


true/false:
SELECT members.id, members.name, 
       IF(services.mid IS NULL, FALSE, TRUE) as services
FROM members
LEFT JOIN services ON (members.id = services.mid)


Skal joines med noget, hvor people stadig er adskilt.. 
de skal have hver sin true/false
SELECT acts_optimized.* IF(active_tickets.id IS NULL, FALSE, TRUE) as checked
FROM acts_optimized
LEFT JOIN active_tickets ON (acts_optimized.id = active_tickets.activity_id)

Så er checked under kontrol. deactivated udestår.
select people.id, people.name, people.ptype_id, people.aargang,
  IF(active_tickets.activity_id IS NULL, FALSE, TRUE) as checked
  from people left outer join active_tickets 
  on active_tickets.person_id = people.id and active_tickets.activity_id = 138
  where people.member_id = 354;


select activities.id, 
	activities.name,
	activities.ptypes_ok, 
	people.id, 
	people.name, 
	case
		when concat('0,', activities.ptypes_ok, ',0') like concat('%,', cast(people.ptype_id as char(10)),',%') then true
		when people.ptype_id > 2 and activities.first_date < people.aargang and activities.last_date > people.aargang then true
		else concat('0,', activities.ptypes_ok, ',0')
		-- false
	end as age_ok, 
	-- people.ptype_id, 
	tickets.id as ticket_id
from activities 
	cross join people
	left outer join tickets 
		on tickets.person_id = people.id 
			and tickets.activity_id = activities.id
	left outer join acts_confs
		on activities.id = acts_confs.id 
	left outer join acts_blocked_by
		on people.id = acts_blocked_by.person_id 
			and activities.id = acts_blocked_by.id
order by activities.id, people.id
;

---------------------------------------


create view member_activities as
select activities.id, 
	people.member_id, 
	acts_sold_out.sold_out,
	group_concat(people.id) as person_ids, 
	group_concat(people.name) as person_names, 
	group_concat(ifnull(acts_blocked_by.blocked_by,'-')) as blocked_by,
	group_concat(ifnull(tickets.id,'-')) as ticket_ids, 
	group_concat(ifnull(invoices.paid,'0'))as paid,
	group_concat(
		case
			when concat('0,', activities.ptypes_ok, ',0') like concat('%,', cast(people.ptype_id as char(10)),',%') then true
			when people.ptype_id > 2 and activities.first_date < people.aargang and activities.last_date > people.aargang then true
			when activities.min_age is null and activities.max_age is null then true
			else false
		end
	) as age_ok 
	from activities
	cross join people
	left outer join acts_sold_out
		on activities.id = acts_sold_out.id
	left outer join acts_confs
		on activities.id = acts_confs.id 
	left outer join acts_blocked_by
		on people.id = acts_blocked_by.person_id 
			and activities.id = acts_blocked_by.id
	left outer join tickets
		on activities.id = tickets.activity_id and
			people.id = tickets.person_id
	left outer join invoices
		on tickets.invoice_id = invoices.id
	group by activities.id, people.member_id;
  
  drop view member_activities;
create view member_activities as
select activities.*,
	people.member_id, 
	acts_sold_out.sold_out as s_out,
	acts_confs.conflict_ids,
	group_concat(people.id) as p_ids, 
	group_concat(people.name) as p_names, 
	group_concat(ifnull(acts_blocked_by.blocked_by,'-')) as blckd_by,
	group_concat(ifnull(tickets.id,'-')) as t_ids, 
	group_concat(ifnull(invoices.paid,'0'))as i_paid,
	group_concat(
		case
			when concat('0,', activities.ptypes_ok, ',0') like concat('%,', cast(people.ptype_id as char(10)),',%') then true
			when people.ptype_id > 2 and activities.first_date < people.aargang and activities.last_date > people.aargang then true
			when activities.min_age is null and activities.max_age is null then true
			else false
		end
	) as age_ok 
	from activities
	cross join people
	left outer join acts_sold_out
		on activities.id = acts_sold_out.id
	left outer join acts_confs
		on activities.id = acts_confs.id
	left outer join acts_blocked_by
		on people.id = acts_blocked_by.person_id 
			and activities.id = acts_blocked_by.id
	left outer join tickets
		on activities.id = tickets.activity_id and
			people.id = tickets.person_id
	left outer join invoices
		on tickets.invoice_id = invoices.id
	group by activities.id, people.member_id;
  
  drop view member_people_paid;
create view member_people_paid as
	select 	members.`*`, 
				count(people.id) as m_people 
		from members
			left outer join people 
				on members.id = people.member_id
			left outer join invoices
				on people.invoice_id = invoices.id
					and invoices.paid = true
			group by members.id;

drop view people_index;
create view people_index as
	select 	people.*,
				members.number as member_number,
				concat(ht2.name, ' ', members.housing_number) as member_housing,
				concat(housing_types.name, ' ', people.housing_number) as person_housing,
				ptypes.name as ptype_name,
				invoices.paid as invoice_paid
		from people
			inner join members 
				on people.member_id = members.id
			inner join ptypes 
				on people.ptype_id = ptypes.id
			inner join invoices 
				on people.invoice_id = invoices.id
			left outer join housing_types 
				on people.housing_type_id = housing_types.id
			left outer join housing_types as ht2
				on members.housing_type_id = housing_types.id;


	select 	people.id, people.name,
				members.number AS member_number,
				ptypes.name,
				invoices.paid AS invoice_paid,
				concat(housing_types.name, ' ', members.housing_number) as p_housing 
				from people 
					join members 
						on people.member_id = members.id 
					join ptypes 
						on people.ptype_id = ptypes.id
					join invoices 
						on people.invoice_id = invoices.id 
					left join housing_types 
						on (members.housing_type_id = housing_types.id and people.housing_type_id is null) or (people.housing_type_id = housing_types.id)
                        order by member_number, people.id
;


drop view member_host;
create view member_host as
select members.`*`, 
	group_concat(people.host_member) as host 
	from members left outer join people on people.member_id = members.id and people.host_member is not null group by members.id;

drop view invoices_total_paid;
create view invoices_total_paid as
select id, member_id, created_at, updated_at, paid as i_paid, payment_link, sum(sub_total) as i_total
from 
(select invoices.*, sum(activities.deltbet) as sub_total
	from invoices
		inner join tickets
			on tickets.invoice_id = invoices.id
		inner join activities 
			on tickets.activity_id = activities.id
	group by invoices.id
union
select invoices.*,  sum(ptypes.price) as sub_total
	from invoices
		inner join people
			on people.invoice_id = invoices.id
		inner join ptypes
			on people.ptype_id = ptypes.id
	group by invoices.id) as invoices_total
	group by invoices_total.id

drop view member_adults_children;
create view member_adults_children as
select members.id, count(distinct adults.id) as adults, count(distinct children.id) as children
	from members
		left outer join people as adults
			on adults.member_id = members.id
				and adults.ptype_id = 1
		left outer join people as children
			on children.member_id = members.id
				and children.ptype_id > 1
				and children.host_member is null
	group by members.id
