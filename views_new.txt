drop view conf;
create ALGORITHM = MERGE view conf as 
  select  id, 
          name, 
          starttime, 
          endtime 
  from activities 
  where `show` = 1;

drop view acts_confs;
create ALGORITHM = MERGE view acts_confs as 
	select activities.id, group_concat(conf.id) as conflict_ids
	from activities 
		inner join conf 
			on activities.starttime < conf.endtime and 
				conf.starttime < activities.endtime and 
				activities.id <> conf.id 
	where `show` = 1
  group by activities.id;


drop view acts_blocked_by;
create ALGORITHM = MERGE view acts_blocked_by as 
  select activities.id, tickets.person_id, group_concat(conf.name separator ';') as blocked_by
  from activities 
    inner join conf 
      on activities.starttime < conf.endtime and 
          conf.starttime < activities.endtime and 
          activities.id <> conf.id
    inner join tickets 
      on tickets.activity_id = conf.id
    inner join invoices 
      on tickets.invoice_id = invoices.id
  where `show` = 1
  group by activities.id, person_id;

drop view acts_sold_out;
CREATE VIEW acts_sold_out AS 
  select activities.id AS id,
  (
    (activities.number is not null) 
      and (activities.number <= count(active_tickets.person_id))
  ) AS sold_out 
  from 
  (
    activities left join active_tickets on
    (
      (activities.id = active_tickets.activity_id)
    )
  ) 
  group by activities.id;

drop view member_activities;
create view member_activities as
select activities.*,
	people.member_id, 
	acts_sold_out.sold_out as s_out,
	acts_confs.conflict_ids,
	group_concat(people.id) as p_ids, 
	group_concat(people.name) as p_names, 
	group_concat(ifnull(acts_blocked_by.blocked_by,'-')) as blckd_by,
	group_concat(ifnull(tickets.id,'-')) as t_ids, 
	group_concat(ifnull(invoices.paid,'0'))as i_paid,
	group_concat(
		case
			when concat('0,', activities.ptypes_ok, ',0') like concat('%,', cast(people.ptype_id as char(10)),',%') then true
			when people.ptype_id > 2 and activities.first_date < people.aargang and activities.last_date > people.aargang then true
			when activities.min_age is null and activities.max_age is null then true
			else false
		end
	) as age_ok,
	group_concat(
		case
			when gender = 0 then true
			when people.koen = 'K' and gender = 1 then true
      when people.koen = 'M' and gender = 2 then true
			else false
		end
	) as gender_ok 
	from activities
	cross join people
	left outer join acts_sold_out
		on activities.id = acts_sold_out.id
	left outer join acts_confs
		on activities.id = acts_confs.id
	left outer join acts_blocked_by
		on people.id = acts_blocked_by.person_id 
			and activities.id = acts_blocked_by.id
	left outer join tickets
		on activities.id = tickets.activity_id and
			people.id = tickets.person_id
	left outer join invoices
		on tickets.invoice_id = invoices.id
	group by activities.id, people.member_id;
  
drop view member_people_paid;
create view member_people_paid as
	select 	members.`*`, 
				count(people.id) as m_people 
		from members
			left outer join people 
				on members.id = people.member_id
			left outer join invoices
				on people.invoice_id = invoices.id
					and invoices.paid = true
			group by members.id;

drop view people_index;
create view people_index as
select  `people`.`id` AS `id`,
        `people`.`name` AS `name`,
        `people`.`member_id` AS `member_id`,
        `people`.`aargang` AS `aargang`,
        `people`.`koen` AS `koen`,
        `people`.`phone` AS `phone`,
        `people`.`host_member` AS `host_member`,
        `people`.`task` AS `task`,
        `members`.`number` AS `member_number`,
        `ptypes`.`name` AS `ptype_name`,
        `invoices`.`paid` AS `invoice_paid`,
        concat(`housing_types`.`name`,' ',`members`.`housing_number`) AS `p_housing`, 
        count(assignments.id) as assignments
  from 
  (
    (
      (
        (
          `people` join `members` on
          (
            (`people`.`member_id` = `members`.`id`)
          )
        ) 
        join `ptypes` on
        (
          (`people`.`ptype_id` = `ptypes`.`id`)
        )
      ) 
      join `invoices` on
      (
        (`people`.`invoice_id` = `invoices`.`id`)
      )
    ) 
    left join `housing_types` on
    (
      (
        (
          (`members`.`housing_type_id` = `housing_types`.`id`) 
          and isnull(`people`.`housing_type_id`)
        ) 
        or (`people`.`housing_type_id` = `housing_types`.`id`)
      )
    )
  )
  left join assignments on 
  (people.id = assignments.person_id)
  group by people.id
  order by `members`.`number`,`people`.`id`;

      
      
  drop view people_index;
  CREATE VIEW people_index AS 
    select  people.*,
            members.number AS member_number,
            ptypes.name AS ptype_name,
            invoices.paid AS invoice_paid,
            concat(housing_types.name,' ',members.housing_number) AS p_housing 
    from 
    (
      (
        (
          (
            people join members on
            (
              (people.member_id = members.id)
            )
          ) 
          join ptypes on
          (
            (people.ptype_id = ptypes.id)
          )
        ) 
        join invoices on
        (
          (people.invoice_id = invoices.id)
        )
      ) 
      left join housing_types on
      (
        (
          (
            (members.housing_type_id = housing_types.id) 
            and isnull(people.housing_type_id)
          ) 
          or 
          (people.housing_type_id = housing_types.id)
        )
      )
    ) 
    order by members.number,people.id;


drop view member_host;
create view member_host as
  select members.`*`, 
    group_concat(people.host_member) as host 
	from  members left outer join 
        people 
          on people.member_id = members.id 
            and people.host_member is not null 
  group by members.id;

drop view invoices_total_paid;
CREATE VIEW invoices_total_paid AS 
  select  invoices_union.id AS id,
          invoices_union.member_id AS member_id,
          invoices_union.paid AS i_paid,
          sum(invoices_union.price) AS i_total 
  from 
  (
    select  invoices.id AS id,
            invoices.paid AS paid,
            invoices.member_id AS member_id,
            people.id AS line_id,
            ptypes.price AS price 
    from 
    (
      (
        invoices left join 
          people on
          (
            (people.invoice_id = invoices.id)
          )
        ) 
        left join ptypes on
        (
          (people.ptype_id = ptypes.id)
        )
      ) 
      union 
        select  invoices.id AS id,
                invoices.paid AS paid,
                invoices.member_id AS member_id,
                tickets.id AS line_id,
                activities.deltbet AS price 
        from 
        (
          (
            invoices left join 
            tickets on
            (
              (tickets.invoice_id = invoices.id)
            )
          ) 
          left join activities on
          (
            (activities.id = tickets.activity_id)
          )
        )
      ) invoices_union 
    group by invoices_union.id;

drop view member_adults_children;
create view member_adults_children as
select members.id, count(distinct adults.id) as adults, count(distinct children.id) as children
	from members
		left outer join people as adults
			on adults.member_id = members.id
				and adults.ptype_id = 1
		left outer join people as children
			on children.member_id = members.id
				and children.ptype_id > 1
				and children.host_member is null
	group by members.id
